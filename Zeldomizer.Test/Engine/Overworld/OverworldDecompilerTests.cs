using System.Linq;
using FluentAssertions;
using NUnit.Framework;

namespace Zeldomizer.Engine.Overworld
{
    [Parallelizable(ParallelScope.Fixtures)]
    public class OverworldDecompilerTests : ZeldomizerBaseTestFixture<OverworldRoomDecompiler>
    {
        protected override OverworldRoomDecompiler GetTestSubject()
        {
            return new OverworldRoomDecompiler();
        }

        [Test]
        public void Decompile_GeneratesCorrectMap()
        {
            // Data.
            var expected00 = new[]
            {
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xE6, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x74, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x74, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x74, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x74, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8,
                0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x74, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8
            };

            var expected36 = new[]
            {
                0x90, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x90,
                0x90, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x90,
                0x90, 0xD8, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0xD8, 0x90,
                0x90, 0xD8, 0x26, 0xB0, 0xAA, 0x26, 0xB0, 0xB4, 0xAA, 0x26, 0xB0, 0xAA, 0x26, 0x26, 0xD8, 0x90,
                0x90, 0xD8, 0x26, 0xAC, 0xB8, 0x26, 0xAC, 0xF3, 0xB8, 0x26, 0xAC, 0xB8, 0x26, 0x26, 0xD8, 0x90,
                0x90, 0xD8, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x76,
                0x90, 0xD8, 0x26, 0x26, 0xB0, 0xAA, 0x26, 0x26, 0x26, 0xB0, 0xAA, 0x26, 0x26, 0x26, 0xCE, 0x90,
                0x90, 0xD8, 0x26, 0x26, 0xAC, 0xB8, 0x26, 0x26, 0x26, 0xAC, 0xB8, 0x26, 0x26, 0x26, 0xD8, 0x90,
                0x90, 0xD8, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0xD8, 0x90,
                0x90, 0xD8, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xD8, 0x90,
                0x90, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x90
            };

            // Arrange.
            var cart = new ZeldaCartridge(Source);
            var tiles = cart.Overworld.Tiles;
            var columns = cart.Overworld.ColumnLibraries;
            var rooms = cart.Overworld.RoomLayouts;

            var overworld = Subject.Decompile(columns, rooms);
            var overworldRooms = overworld.Rooms.ToArray();
            overworldRooms[0x00].Select(i => tiles[i]).Should().Equal(expected00);
            overworldRooms[0x36].Select(i => tiles[i]).Should().Equal(expected36);
        }
    }
}